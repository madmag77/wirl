workflow PhotoNotesWorkflow {

  metadata {
    description: "Extract useful text from recent photos and save to Obsidian note"
    owner: "assistant"
    version: "1.0"
  }

  inputs {
    String obsidian_folder_path
  }

  outputs {
    String notes_file_path = SaveNotes.notes_file_path
  }

  node GetPhotos {
    call get_photos
    inputs {
      String obsidian_folder_path = obsidian_folder_path
    }
    const {
      export_path: "~/Exports"
      days_back: 1
    }
    outputs {
      List<String> file_paths
      Bool no_files_found
    }
  }

  cycle NotesLoop {
    inputs {
      List<String> initial_file_paths_to_process = GetPhotos.file_paths
      List<String> remaining_file_paths_to_process = ReadPhoto.remaining_file_paths
    }
    outputs {
      List<String> notes = CheckAllPhotosProcessed.notes
    }

    node ReadPhoto {
      call read_photo
      inputs {
        List<String> file_paths = NotesLoop.remaining_file_paths_to_process?
        List<String> initial_file_paths_to_process = NotesLoop.initial_file_paths_to_process
      }
      outputs {
        T<Image> image
        String file_path
        List<String> remaining_file_paths
        Bool no_files_to_process
      }
    }

    node ExtractNote {
      call extract_note
      inputs {
        T<Image> image = ReadPhoto.image
      }
      const {
        model: "gemma3:12b"
        base_url: "http://localhost:11434/v1/"
        temperature: 0
      }
      outputs {
        String note
      }
    }

    node CheckAllPhotosProcessed {
      call check_all_photos_processed
      inputs {
        List<String> remaining_file_paths_to_process = ReadPhoto.remaining_file_paths?
        String note = ExtractNote.note?
        Bool no_files_to_process = ReadPhoto.no_files_to_process?
      }
      when {
        ReadPhoto.no_files_to_process or ExtractNote.note
      }
      outputs {
        Bool is_done
        (append) List<String> notes
      }
    }

    guard {
      inputs {
        Bool is_done = CheckAllPhotosProcessed.is_done
      }
      when {
        CheckAllPhotosProcessed.is_done
      }
    }
    max_iterations: 30
  }

  node AgreeWithUser {
    call agree_with_user
    const {
      subject: "New notes were extracted from photos. Request for review"
      frontend_base_url: "http://localhost:3000/hitl"
    }
    hitl { correlation: "default", timeout: 24h }
    inputs {
      List<String> notes = NotesLoop.notes
    }
    outputs {
      String comments_from_user
    }
  }

  node ApplyUserComments {
    call apply_user_comments
    const {
      model: "gpt-oss:20b"
      reasoning: False
      temperature: 0
    }
    inputs {
      List<String> notes = NotesLoop.notes
      String comments_from_user = AgreeWithUser.comments_from_user
    }
    outputs {
      String notes_to_save
    }
  }

  node SaveNotes {
    call save_notes
    inputs {
      String notes = ApplyUserComments.notes_to_save?
      Bool no_files_found = GetPhotos.no_files_found?
      String obsidian_folder_path = obsidian_folder_path
    }
    when {
      GetPhotos.no_files_found or ApplyUserComments.notes_to_save
    }
    outputs {
      String notes_file_path
    }
  }
}
